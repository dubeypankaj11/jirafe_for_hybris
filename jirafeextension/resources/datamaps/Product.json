{
    "__sites__": "@{
        def baseStores = model?.catalogVersion?.catalog?.baseStores
        def sites = []
        for (def store in baseStores) {
            sites.add(store.uid)
        }
        return sites
    }",
    "id": "pk@{return pk.toString()}",
    "is_product": "@{return !model.hasProperty('baseProduct')}",
    "is_sku": "@{return model.variants == []}",
    "inactive": "approvalStatus@{return approvalStatus?.code != 'approved'}",
    "catalog": "@{
        def version = model.catalogVersion
        def catalog = version?.catalog
        return [
            id: catalog.id?.toString(),
            name: catalog.name,
            version_id: version?.version?.toString()
        ]
    }",
    "name": "name",
    "code": "code",
    "ancestors": "@{
        if (!model.hasProperty('baseProduct')) return null
        def ancestry = []
        while (model.hasProperty('baseProduct')) {
            model = model.baseProduct
            ancestry.add(model.pk.toString())
        }
        return ancestry
    }",
    "base_product": "@{
        if (!model.hasProperty('baseProduct')) return null
        def baseProduct = model.baseProduct
        while (baseProduct.hasProperty('baseProduct')) {
            baseProduct = baseProduct.baseProduct
        }
        return [
            id: baseProduct?.pk.toString(),
            code: baseProduct?.code,
            name: baseProduct?.name
        ]
    }",
    "vendors": [
        {
            "_path": "vendors"
        },
        {
            "id": "pk@{return pk.toString()}",
            "name": "name"
        }
    ],
    "brand": "manufacturerName",
    "rating": "averageRating",
    "create_date": "@{
        createDate = dateFormat.format(model?.creationtime ?: model?.modifiedtime ?: new Date())
        return createDate
    }",
    "change_date": "@{
        return model?.modifiedtime ? dateFormat.format(model?.modifiedtime) : createDate
    }",
    "images": "@{
        def url = model?.picture?.URL
        import de.hybris.platform.util.Config
        def prefix = Config.getString('media.' + site + '.http', '')
        if (prefix && prefix.endsWith('/')) prefix = prefix[0..-2]
        return url ? [[url: prefix + url]] : null
    }",
    "categories": [
        {
            "_path": "supercategories"
        },
        {
            "id": "pk@{return pk.toString()}",
            "name": "name"
        }
    ],
    "attributes": "@{
        if (!model.hasProperty('baseProduct')) return null
        def ret = []
        def vadms = model.baseProduct?.variantType?.variantAttributes
        for (def vadm in vadms) {
            def name = vadm.name
            def m = model
            for (;;) {
                def value
                try {
                    value = modelService.getAttributeValue(m, name)
                } catch (e) {
                }
                if (value) {
                    ret.add([
                        id: name,
                        name: name,
                        value: value,
                    ])
                    break
                }
                if (!m.hasProperty('baseProduct')) break
                m = m.baseProduct
            }
        }
        return ret == [] ? null : ret
    }"
}
